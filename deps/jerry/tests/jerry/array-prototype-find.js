'use strict';

// this file is the test262 test suite automatically generated by the tool

// Copyright (C) 2017 Ecma International. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
/*---
description: |
    Collection of assertion functions used throughout test262
---*/

var Test262Error = Error;

var $ERROR;
$ERROR = function $ERROR(message) {
  throw new Test262Error('Test262Error: ' + message);
};

function assert(mustBeTrue, message) {
  if (mustBeTrue === true) {
    return;
  }

  if (message === undefined) {
    message = 'Expected true but got ' + String(mustBeTrue);
  }
  $ERROR(message);
}

assert._isSameValue = function(a, b) {
  if (a === b) {
    // Handle +/-0 vs. -/+0
    return a !== 0 || 1 / a === 1 / b;
  }

  // Handle NaN vs. NaN
  return a !== a && b !== b;
};

assert.sameValue = function(actual, expected, message) {
  if (assert._isSameValue(actual, expected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(«' + String(actual) +
    '», «' + String(expected) + '») to be true';

  $ERROR(message);
};

assert.notSameValue = function(actual, unexpected, message) {
  if (!assert._isSameValue(actual, unexpected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(«' + String(actual) +
    '», «' + String(unexpected) + '») to be false';

  $ERROR(message);
};

assert.throws = function(expectedErrorConstructor, func, message) {
  if (typeof func !== 'function') {
    $ERROR('assert.throws requires two arguments: the error constructor ' +
      'and a function to run');
    return;
  }
  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  try {
    func();
  } catch (thrown) {
    if (typeof thrown !== 'object' || thrown === null) {
      message += 'Thrown value was not an object!';
      $ERROR(message);
    } else if (thrown.constructor !== expectedErrorConstructor) {
      message += 'Expected a ' + expectedErrorConstructor.name +
        ' but got a ' + thrown.constructor.name;
      $ERROR(message);
    }
    return;
  }

  message += 'Expected a ' + expectedErrorConstructor.name +
    ' to be thrown but no exception was thrown at all';
  $ERROR(message);
};

var tests = [
  {
    name: 'array-altered-during-loop.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  The range of elements processed is set before the first call to `predicate`.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  6. If thisArg was supplied, let T be thisArg; else let T be undefined.
  7. Let k be 0.
  8. Repeat, while k < len
    ...
    d. Let testResult be ToBoolean(Call(predicate, T, «kValue, k, O»)).
  ...
---*/

      var arr = ['Shoes', 'Car', 'Bike'];
      var results = [];

      arr.find(function(kValue) {
        if (results.length === 0) {
          arr.splice(1, 1);
        }
        results.push(kValue);
      });

      assert.sameValue(results.length, 3, 'predicate called three times');
      assert.sameValue(results[0], 'Shoes');
      assert.sameValue(results[1], 'Bike');
      assert.sameValue(results[2], undefined);

      results = [];
      arr = ['Skateboard', 'Barefoot'];
      arr.find(function(kValue) {
        if (results.length === 0) {
          arr.push('Motorcycle');
          arr[1] = 'Magic Carpet';
        }

        results.push(kValue);
      });

      assert.sameValue(results.length, 2, 'predicate called twice');
      assert.sameValue(results[0], 'Skateboard');
      assert.sameValue(results[1], 'Magic Carpet');

    }
  },
  {
    name: 'predicate-call-parameters.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Predicate called as F.call( thisArg, kValue, k, O ) for each array entry.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  6. If thisArg was supplied, let T be thisArg; else let T be undefined.
  7. Let k be 0.
  8. Repeat, while k < len
    ...
    d. Let testResult be ToBoolean(Call(predicate, T, «kValue, k, O»)).
    e. ReturnIfAbrupt(testResult).
  ...
---*/

      var arr = ['Mike', 'Rick', 'Leo'];

      var results = [];

      arr.find(function(kValue, k, O) {
        results.push(arguments);
      });

      assert.sameValue(results.length, 3);

      var result = results[0];
      assert.sameValue(result[0], 'Mike');
      assert.sameValue(result[1], 0);
      assert.sameValue(result[2], arr);
      assert.sameValue(result.length, 3);

      result = results[1];
      assert.sameValue(result[0], 'Rick');
      assert.sameValue(result[1], 1);
      assert.sameValue(result[2], arr);
      assert.sameValue(result.length, 3);

      result = results[2];
      assert.sameValue(result[0], 'Leo');
      assert.sameValue(result[1], 2);
      assert.sameValue(result[2], arr);
      assert.sameValue(result.length, 3);

    }
  },
  {
    name: 'predicate-call-this-non-strict.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Predicate thisArg as F.call( thisArg, kValue, k, O ) for each array entry.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  8. Repeat, while k < len
    ...
    d. Let testResult be ToBoolean(Call(predicate, T, «kValue, k, O»)).
    e. ReturnIfAbrupt(testResult).
  ...
flags: [noStrict]
---*/

      var result;

      [1].find(function(kValue, k, O) {
        result = this;
      });

      assert.sameValue(result, this);

      var o = {};
      [1].find(function() {
        result = this;
      }, o);

      assert.sameValue(result, o);

    }
  },
  {
    name: 'predicate-call-this-strict.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Predicate thisArg as F.call( thisArg, kValue, k, O ) for each array entry.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  8. Repeat, while k < len
    ...
    d. Let testResult be ToBoolean(Call(predicate, T, «kValue, k, O»)).
    e. ReturnIfAbrupt(testResult).
  ...
flags: [onlyStrict]
---*/

      var result;

      [1].find(function(kValue, k, O) {
        result = this;
      });

      assert.sameValue(result, undefined);

      var o = {};
      [1].find(function() {
        result = this;
      }, o);

      assert.sameValue(result, o);

    }
  },
  {
    name: 'predicate-called-for-each-array-property.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Predicate is called for each array property.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  6. If thisArg was supplied, let T be thisArg; else let T be undefined.
  7. Let k be 0.
  8. Repeat, while k < len
    ...
    d. Let testResult be ToBoolean(Call(predicate, T, «kValue, k, O»)).
  ...
---*/

      var arr = [undefined, , , 'foo'];
      var called = 0;

      arr.find(function() {
        called++;
      });

      assert.sameValue(called, 4);

    }
  },
  {
    name: 'predicate-is-not-callable-throws.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Throws a TypeError exception if predicate is not callable.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  5. If IsCallable(predicate) is false, throw a TypeError exception.
  ...
---*/

      assert.throws(TypeError, function() {
        [].find({});
      });

      assert.throws(TypeError, function() {
        [].find(null);
      });

      assert.throws(TypeError, function() {
        [].find(undefined);
      });

      assert.throws(TypeError, function() {
        [].find(true);
      });

      assert.throws(TypeError, function() {
        [].find(1);
      });

      assert.throws(TypeError, function() {
        [].find('');
      });

      assert.throws(TypeError, function() {
        [].find(1);
      });

      assert.throws(TypeError, function() {
        [].find([]);
      });

      assert.throws(TypeError, function() {
        [].find(/./);
      });

    }
  },
  {
    name: 'predicate-not-called-on-empty-array.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Predicate is only called if this.length is > 0.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  7. Let k be 0.
  8. Repeat, while k < len
    ...
    d. Let testResult be ToBoolean(Call(predicate, T, «kValue, k, O»)).
  ...
  9. Return undefined.
---*/

      var called = false;

      var predicate = function() {
        called = true;
        return true;
      };

      var result = [].find(predicate);

      assert.sameValue(called, false, '[].find(predicate) does not call predicate');
      assert.sameValue(result, undefined, '[].find(predicate) returned undefined');

    }
  },
  {
    name: 'return-abrupt-from-predicate-call.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Return abrupt from predicate call.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  7. Let k be 0.
  8. Repeat, while k < len
    ...
    d. Let testResult be ToBoolean(Call(predicate, T, «kValue, k, O»)).
    e. ReturnIfAbrupt(testResult).
  ...
---*/

      var predicate = function() {
        throw new Test262Error();
      };

      assert.throws(Test262Error, function() {
        [1].find(predicate);
      });

    }
  },
  {
    name: 'return-abrupt-from-property.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Returns abrupt from getting property value from `this`.
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  ...
  7. Let k be 0.
  8. Repeat, while k < len
    a. Let Pk be ToString(k).
    b. Let kValue be Get(O, Pk).
    c. ReturnIfAbrupt(kValue).
  ...
---*/

      var o = {
        length: 1
      };

      Object.defineProperty(o, 0, {
        get: function() {
          throw new Test262Error();
        }
      });

      assert.throws(Test262Error, function() {
        [].find.call(o, function() {});
      });

    }
  },
  {
    name: 'return-abrupt-from-this-length.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Return abrupt from ToLength(Get(O, "length")).
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  1. Let O be ToObject(this value).
  2. ReturnIfAbrupt(O).
  3. Let len be ToLength(Get(O, "length")).
  4. ReturnIfAbrupt(len).
---*/

      var o1 = {};

      Object.defineProperty(o1, 'length', {
        get: function() {
          throw new Test262Error();
        },
        configurable: true
      });

      assert.throws(Test262Error, function() {
        [].find.call(o1);
      });

      var o2 = {
        length: {
          valueOf: function() {
            throw new Test262Error();
          }
        }
      };
      assert.throws(Test262Error, function() {
        [].find.call(o2);
      });

    }
  },
  {
    name: 'return-abrupt-from-this.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.find
es6id: 22.1.3.8
description: >
  Return abrupt from ToObject(this value).
info: |
  22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )

  1. Let O be ToObject(this value).
  2. ReturnIfAbrupt(O).
---*/

      // predicate fn is given to avoid false positives
      assert.throws(TypeError, function() {
        Array.prototype.find.call(undefined, function() {});
      });

      assert.throws(TypeError, function() {
        Array.prototype.find.call(null, function() {});
      });

    }
  },
];

for (var i = 0; i < tests.length; ++i) {
  var exec = tests[i].exec;
  exec();
}
