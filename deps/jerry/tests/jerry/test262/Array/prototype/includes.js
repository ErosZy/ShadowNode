'use strict';

// this file is the test262 test suite automatically generated by the tool

// Copyright (C) 2017 Ecma International. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
/*---
description: |
    Collection of assertion functions used throughout test262
---*/

var Test262Error = Error;

var $ERROR;
$ERROR = function $ERROR(message) {
  throw new Test262Error('Test262Error: ' + message);
};

function assert(mustBeTrue, message) {
  if (mustBeTrue === true) {
    return;
  }

  if (message === undefined) {
    message = 'Expected true but got ' + String(mustBeTrue);
  }
  $ERROR(message);
}

assert._isSameValue = function(a, b) {
  if (a === b) {
    // Handle +/-0 vs. -/+0
    return a !== 0 || 1 / a === 1 / b;
  }

  // Handle NaN vs. NaN
  return a !== a && b !== b;
};

assert.sameValue = function(actual, expected, message) {
  if (assert._isSameValue(actual, expected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(«' + String(actual) +
    '», «' + String(expected) + '») to be true';

  $ERROR(message);
};

assert.notSameValue = function(actual, unexpected, message) {
  if (!assert._isSameValue(actual, unexpected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(«' + String(actual) +
    '», «' + String(unexpected) + '») to be false';

  $ERROR(message);
};

assert.throws = function(expectedErrorConstructor, func, message) {
  if (typeof func !== 'function') {
    $ERROR('assert.throws requires two arguments: the error constructor ' +
      'and a function to run');
    return;
  }
  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  try {
    func();
  } catch (thrown) {
    if (typeof thrown !== 'object' || thrown === null) {
      message += 'Thrown value was not an object!';
      $ERROR(message);
    } else if (thrown.constructor !== expectedErrorConstructor) {
      message += 'Expected a ' + expectedErrorConstructor.name +
        ' but got a ' + thrown.constructor.name;
      $ERROR(message);
    }
    return;
  }

  message += 'Expected a ' + expectedErrorConstructor.name +
    ' to be thrown but no exception was thrown at all';
  $ERROR(message);
};

var tests = [
  {
    name: 'fromIndex-equal-or-greater-length-returns-false.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: Return false if fromIndex >= ArrayLength
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step
  produces the value 0.)
  5. If n ≥ 0, then
    a. Let k be n.
  ...
  7. Repeat, while k < len
    ...
  8. Return false.
---*/

      var sample = [7, 7, 7, 7];
      assert.sameValue(sample.includes(7, 4), false, 'length');
      assert.sameValue(sample.includes(7, 5), false, 'length + 1');

    }
  },
  {
    name: 'fromIndex-infinity.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: handle Infinity values for fromIndex
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step
  produces the value 0.)
  5. If n ≥ 0, then
    a. Let k be n.
  6. Else n < 0,
    a. Let k be len + n.
    b. If k < 0, let k be 0.
  7. Repeat, while k < len
    ...
  8. Return false.
---*/

      var sample = [42, 43, 43, 41];

      assert.sameValue(
        sample.includes(43, Infinity),
        false,
        'includes(43, Infinity)'
      );
      assert.sameValue(
        sample.includes(43, -Infinity),
        true,
        'includes(43, -Infinity)'
      );

    }
  },
  {
    name: 'fromIndex-minus-zero.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: -0 fromIndex becomes 0
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  5. If n ≥ 0, then
    a. Let k be n.
  ...
  7. Repeat, while k < len
  ...
---*/

      var sample = [42, 43];
      assert.sameValue(sample.includes(42, -0), true, '-0 [0]');
      assert.sameValue(sample.includes(43, -0), true, '-0 [1]');
      assert.sameValue(sample.includes(44, -0), false, '-0 [2]');

    }
  },
  {
    name: 'length-boundaries.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: length boundaries from ToLength operation
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  2. Let len be ? ToLength(? Get(O, "length")).
  ...

  7.1.15 ToLength ( argument )

  1. Let len be ? ToInteger(argument).
  2. If len ≤ +0, return +0.
  3. If len is +∞, return 2**53-1.
  4. Return min(len, 2**53-1).
---*/

      var obj = {
        '0': 'a',
        '1': 'b',
        '9007199254740990': 'c', // 2 ** 53 - 2
        '9007199254740991': 'd', // 2 ** 53 - 1
        '9007199254740992': 'e', // 2 ** 53
      };

      obj.length = -0;
      assert.sameValue([].includes.call(obj, 'a'), false, '-0');

      obj.length = -1;
      assert.sameValue([].includes.call(obj, 'a'), false, '-1');

      obj.length = -0.1;
      assert.sameValue([].includes.call(obj, 'a'), false, '-0.1');

      obj.length = -Infinity;
      assert.sameValue([].includes.call(obj, 'a'), false, '-Infinity');

      var fromIndex = 9007199254740990;

      obj.length = 9007199254740991;
      assert.sameValue(
        [].includes.call(obj, 'c', fromIndex),
        true,
        '2**53-1, found value at 2**53-2'
      );

      obj.length = 9007199254740991;
      assert.sameValue(
        [].includes.call(obj, 'd', fromIndex),
        false,
        '2**53-1, ignores indexes >= 2**53-1'
      );

      obj.length = 9007199254740992;
      assert.sameValue(
        [].includes.call(obj, 'd', fromIndex),
        false,
        '2**53, ignores indexes >= 2**53-1'
      );

      obj.length = 9007199254740993;
      assert.sameValue(
        [].includes.call(obj, 'd', fromIndex),
        false,
        '2**53+1, ignores indexes >= 2**53-1'
      );

      obj.length = Infinity;
      assert.sameValue(
        [].includes.call(obj, 'c', fromIndex),
        true,
        'Infinity, found item'
      );
      assert.sameValue(
        [].includes.call(obj, 'd', fromIndex),
        false,
        'Infinity, ignores indexes >= 2**53-1'
      );

    }
  },
  {
    name: 'length-zero-returns-false.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: Returns false if length is 0
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  2. Let len be ? ToLength(? Get(O, "length")).
  3. If len is 0, return false.
  ...
---*/

      var calls = 0;
      var fromIndex = {
        valueOf: function() {
          calls++;
        }
      };

      var sample = [];
      assert.sameValue(sample.includes(0), false, 'returns false');
      assert.sameValue(sample.includes(), false, 'returns false - no arg');
      assert.sameValue(sample.includes(0, fromIndex), false, 'using fromIndex');
      assert.sameValue(calls, 0, 'length is checked before ToInteger(fromIndex)');

    }
  },
  {
    name: 'no-arg.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: no argument searches for a undefined value
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  7. Repeat, while k < len
    a. Let elementK be the result of ? Get(O, ! ToString(k)).
    b. If SameValueZero(searchElement, elementK) is true, return true.
    c. Increase k by 1.
  ...
---*/

      assert.sameValue([0].includes(), false, '[0].includes()');
      assert.sameValue([undefined].includes(), true, '[undefined].includes()');

    }
  },
  {
    name: 'return-abrupt-get-length.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: Return abrupt from Get(O, "length")
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  2. Let len be ? ToLength(? Get(O, "length")).
  ...
---*/

      var obj = {};

      Object.defineProperty(obj, 'length', {
        get: function() {
          throw new Test262Error();
        }
      });

      assert.throws(Test262Error, function() {
        [].includes.call(obj, 7);
      });

    }
  },
  {
    name: 'return-abrupt-get-prop.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: Return abrupt getting index properties
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  7. Repeat, while k < len
    a. Let elementK be the result of ? Get(O, ! ToString(k)).
  ...
---*/

      var stopped = 0;

      var obj = {
        length: 3
      };

      Object.defineProperty(obj, '1', {
        get: function() {
          throw new Test262Error();
        }
      });

      Object.defineProperty(obj, '2', {
        get: function() {
          stopped++;
        }
      });

      assert.throws(Test262Error, function() {
        [].includes.call(obj, 7);
      });

      assert.sameValue(stopped, 0, 'It stops the loop after the abrupt completion');

    }
  },
  {
    name: 'return-abrupt-tointeger-fromindex.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: Return abrupt from ToInteger(fromIndex)
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step
  produces the value 0.)
  ...
---*/

      var fromIndex = {
        valueOf: function() {
          throw new Test262Error();
        }
      };

      var sample = [7];

      assert.throws(Test262Error, function() {
        sample.includes(7, fromIndex);
      });

    }
  },
  {
    name: 'return-abrupt-tonumber-length.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: Return abrupt from ToNumber("length")
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  2. Let len be ? ToLength(? Get(O, "length")).
  ...
---*/

      var obj1 = {
        length: {
          valueOf: function() {
            throw new Test262Error();
          }
        }
      };

      var obj2 = {
        length: {
          toString: function() {
            throw new Test262Error();
          }
        }
      };

      assert.throws(Test262Error, function() {
        [].includes.call(obj1);
      }, 'valueOf');

      assert.throws(Test262Error, function() {
        [].includes.call(obj2);
      }, 'toString');

    }
  },
  {
    name: 'samevaluezero.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: search element is compared using SameValueZero
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  7. Repeat, while k < len
    a. Let elementK be the result of ? Get(O, ! ToString(k)).
    b. If SameValueZero(searchElement, elementK) is true, return true.
    c. Increase k by 1.
  ...
---*/

      var sample = [42, 0, 1, NaN];
      assert.sameValue(sample.includes('42'), false, "'42'");
      assert.sameValue(sample.includes([42]), false, '[42]');
      assert.sameValue(sample.includes(42.0), true, '42.0');
      assert.sameValue(sample.includes(-0), true, '-0');
      assert.sameValue(sample.includes(true), false, 'true');
      assert.sameValue(sample.includes(false), false, 'false');
      assert.sameValue(sample.includes(null), false, 'null');
      assert.sameValue(sample.includes(''), false, 'empty string');
      assert.sameValue(sample.includes(NaN), true, 'NaN');

    }
  },
  {
    name: 'sparse.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: Searches all indexes from a sparse array
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  5. If n ≥ 0, then
    a. Let k be n.
  6. Else n < 0,
    a. Let k be len + n.
    b. If k < 0, let k be 0.
  7. Repeat, while k < len
    a. Let elementK be the result of ? Get(O, ! ToString(k)).
    b. If SameValueZero(searchElement, elementK) is true, return true.
    c. Increase k by 1.
  ...
---*/

      assert.sameValue(
        [, , , ].includes(undefined),
        true,
        '[ , , , ].includes(undefined)'
      );

      assert.sameValue(
        [, , , 42 ].includes(undefined, 4),
        false,
        '[ , , , 42, ].includes(undefined, 4)'
      );

      var sample = [, , , 42, , ];

      assert.sameValue(
        sample.includes(undefined),
        true,
        'sample.includes(undefined)'
      );
      assert.sameValue(
        sample.includes(undefined, 4),
        true,
        'sample.includes(undefined, 4)'
      );
      assert.sameValue(
        sample.includes(42, 3),
        true,
        'sample.includes(42, 3)'
      );

    }
  },
  {
    name: 'this-is-not-object.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
es6id: 22.2.3.14
esid: sec-array.prototype.includes
description: >
  Throws a TypeError exception when `this` cannot be coerced to Object
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  1. Let O be ? ToObject(this value).
  ...
---*/

      var includes = Array.prototype.includes;

      assert.throws(TypeError, function() {
        includes.call(undefined, 42);
      }, 'this is undefined');

      assert.throws(TypeError, function() {
        includes.call(null, 42);
      }, 'this is null');

    }
  },
  {
    name: 'tointeger-fromindex.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: get the integer value from fromIndex
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step
  produces the value 0.)
  5. If n ≥ 0, then
    a. Let k be n.
  ...
  7. Repeat, while k < len
    a. Let elementK be the result of ? Get(O, ! ToString(k)).
    b. If SameValueZero(searchElement, elementK) is true, return true.
    c. Increase k by 1.
  8. Return false.
---*/

      var obj = {
        valueOf: function() {
          return 1;
        }
      };

      var sample = [42, 43];
      assert.sameValue(sample.includes(42, '1'), false, 'string [0]');
      assert.sameValue(sample.includes(43, '1'), true, 'string [1]');

      assert.sameValue(sample.includes(42, true), false, 'true [0]');
      assert.sameValue(sample.includes(43, true), true, 'true [1]');

      assert.sameValue(sample.includes(42, false), true, 'false [0]');
      assert.sameValue(sample.includes(43, false), true, 'false [1]');

      assert.sameValue(sample.includes(42, NaN), true, 'NaN [0]');
      assert.sameValue(sample.includes(43, NaN), true, 'NaN [1]');

      assert.sameValue(sample.includes(42, null), true, 'null [0]');
      assert.sameValue(sample.includes(43, null), true, 'null [1]');

      assert.sameValue(sample.includes(42, undefined), true, 'undefined [0]');
      assert.sameValue(sample.includes(43, undefined), true, 'undefined [1]');

      assert.sameValue(sample.includes(42, null), true, 'null [0]');
      assert.sameValue(sample.includes(43, null), true, 'null [1]');

      assert.sameValue(sample.includes(42, obj), false, 'object [0]');
      assert.sameValue(sample.includes(43, obj), true, 'object [1]');

    }
  },
  {
    name: 'tolength-length.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: length value coerced on ToLength
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  2. Let len be ? ToLength(? Get(O, "length")).
  ...

  7.1.15 ToLength ( argument )

  1. Let len be ? ToInteger(argument).
  2. If len ≤ +0, return +0.
  3. If len is +∞, return 253-1.
  4. Return min(len, 253-1).
---*/

      var obj = {
        '0': 'a',
        '1': 'b'
      };

      obj.length = 0.1;
      assert.sameValue([].includes.call(obj, 'a'), false, '0.1');

      obj.length = 0.99;
      assert.sameValue([].includes.call(obj, 'a'), false, '0.99');

      obj.length = 1.00001;
      assert.sameValue([].includes.call(obj, 'a'), true, '1.00001');

      obj.length = 1.1;
      assert.sameValue([].includes.call(obj, 'a'), true, '1.1');

      obj.length = '0';
      assert.sameValue([].includes.call(obj, 'a'), false, "string '0'");

      obj.length = '1';
      assert.sameValue([].includes.call(obj, 'a'), true, "string '1', item found");

      obj.length = '1';
      assert.sameValue([].includes.call(obj, 'b'), false, "string '1', item not found");

      obj.length = '2';
      assert.sameValue([].includes.call(obj, 'b'), true, "string '2', item found");

      obj.length = '';
      assert.sameValue([].includes.call(obj, 'a'), false, 'the empty string');

      obj.length = undefined;
      assert.sameValue([].includes.call(obj, 'a'), false, 'undefined');

      obj.length = NaN;
      assert.sameValue([].includes.call(obj, 'a'), false, 'NaN');

      obj.length = [];
      assert.sameValue([].includes.call(obj, 'a'), false, '[]');

      obj.length = [1];
      assert.sameValue([].includes.call(obj, 'a'), true, '[1]');

      obj.length = null;
      assert.sameValue([].includes.call(obj, 'a'), false, 'null');

      obj.length = false;
      assert.sameValue([].includes.call(obj, 'a'), false, 'false');

      obj.length = true;
      assert.sameValue([].includes.call(obj, 'a'), true, 'true');

      obj.length = {
        valueOf: function() {
          return 2;
        }
      };
      assert.sameValue([].includes.call(obj, 'b'), true, 'ordinary object.valueOf');

      obj.length = {
        toString: function() {
          return 2;
        }
      };
      assert.sameValue([].includes.call(obj, 'b'), true, 'ordinary object.toString');

    }
  },
  {
    name: 'using-fromindex.js',
    exec: function() {
      // Copyright (C) 2016 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.

      /*---
esid: sec-array.prototype.includes
description: Searches using fromIndex
info: |
  22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )

  ...
  5. If n ≥ 0, then
    a. Let k be n.
  6. Else n < 0,
    a. Let k be len + n.
    b. If k < 0, let k be 0.
  7. Repeat, while k < len
    a. Let elementK be the result of ? Get(O, ! ToString(k)).
    b. If SameValueZero(searchElement, elementK) is true, return true.
    c. Increase k by 1.
  ...
---*/

      var sample = ['a', 'b', 'c'];
      assert.sameValue(sample.includes('a', 0), true, "includes('a', 0)");
      assert.sameValue(sample.includes('a', 1), false, "includes('a', 1)");
      assert.sameValue(sample.includes('a', 2), false, "includes('a', 2)");

      assert.sameValue(sample.includes('b', 0), true, "includes('b', 0)");
      assert.sameValue(sample.includes('b', 1), true, "includes('b', 1)");
      assert.sameValue(sample.includes('b', 2), false, "includes('b', 2)");

      assert.sameValue(sample.includes('c', 0), true, "includes('c', 0)");
      assert.sameValue(sample.includes('c', 1), true, "includes('c', 1)");
      assert.sameValue(sample.includes('c', 2), true, "includes('c', 2)");

      assert.sameValue(sample.includes('a', -1), false, "includes('a', -1)");
      assert.sameValue(sample.includes('a', -2), false, "includes('a', -2)");
      assert.sameValue(sample.includes('a', -3), true, "includes('a', -3)");
      assert.sameValue(sample.includes('a', -4), true, "includes('a', -4)");

      assert.sameValue(sample.includes('b', -1), false, "includes('b', -1)");
      assert.sameValue(sample.includes('b', -2), true, "includes('b', -2)");
      assert.sameValue(sample.includes('b', -3), true, "includes('b', -3)");
      assert.sameValue(sample.includes('b', -4), true, "includes('b', -4)");

      assert.sameValue(sample.includes('c', -1), true, "includes('c', -1)");
      assert.sameValue(sample.includes('c', -2), true, "includes('c', -2)");
      assert.sameValue(sample.includes('c', -3), true, "includes('c', -3)");
      assert.sameValue(sample.includes('c', -4), true, "includes('c', -4)");

    }
  },
];

for (var i = 0; i < tests.length; ++i) {
  var exec = tests[i].exec;
  exec();
}
