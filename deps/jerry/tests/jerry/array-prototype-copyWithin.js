'use strict';

// this file is the test262 test suite automatically generated by the tool

// Copyright (C) 2017 Ecma International. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
/*---
description: |
    Collection of assertion functions used throughout test262
---*/

var Test262Error = Error;

var $ERROR;
$ERROR = function $ERROR(message) {
  throw new Test262Error('Test262Error: ' + message);
};

function assert(mustBeTrue, message) {
  if (mustBeTrue === true) {
    return;
  }

  if (message === undefined) {
    message = 'Expected true but got ' + String(mustBeTrue);
  }
  $ERROR(message);
}

assert._isSameValue = function(a, b) {
  if (a === b) {
    // Handle +/-0 vs. -/+0
    return a !== 0 || 1 / a === 1 / b;
  }

  // Handle NaN vs. NaN
  return a !== a && b !== b;
};

assert.sameValue = function(actual, expected, message) {
  if (assert._isSameValue(actual, expected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(«' + String(actual) +
    '», «' + String(expected) + '») to be true';

  $ERROR(message);
};

assert.notSameValue = function(actual, unexpected, message) {
  if (!assert._isSameValue(actual, unexpected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(«' + String(actual) +
    '», «' + String(unexpected) + '») to be false';

  $ERROR(message);
};

assert.throws = function(expectedErrorConstructor, func, message) {
  if (typeof func !== 'function') {
    $ERROR('assert.throws requires two arguments: the error constructor ' +
      'and a function to run');
    return;
  }
  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  try {
    func();
  } catch (thrown) {
    if (typeof thrown !== 'object' || thrown === null) {
      message += 'Thrown value was not an object!';
      $ERROR(message);
    } else if (thrown.constructor !== expectedErrorConstructor) {
      message += 'Expected a ' + expectedErrorConstructor.name +
        ' but got a ' + thrown.constructor.name;
      $ERROR(message);
    }
    return;
  }

  message += 'Expected a ' + expectedErrorConstructor.name +
    ' to be thrown but no exception was thrown at all';
  $ERROR(message);
};

var tests = [
  {
    name: 'fill-holes.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.copywithin
es6id: 22.1.3.3
description: >
  Loop from each property, even empty holes.
---*/

      var arr = [0, 1, , , 1];

      arr.copyWithin(0, 1, 4);

      assert.sameValue(arr.length, 5);
      assert.sameValue(arr[0], 1);
      assert.sameValue(arr[4], 1);
      // assert.sameValue(arr.hasOwnProperty(1), false, "1");
      // assert.sameValue(arr.hasOwnProperty(2), false, "2");
      // assert.sameValue(arr.hasOwnProperty(3), false, "3");

    }
  },
  {
    name: 'return-abrupt-from-end.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.copywithin
es6id: 22.1.3.3
description: >
  Return abrupt from ToInteger(end).
info: |
  22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )

  ...
  11. If end is undefined, let relativeEnd be len; else let relativeEnd be
  ToInteger(end).
  12. ReturnIfAbrupt(relativeEnd).
  ...
---*/

      var o1 = {
        valueOf: function() {
          throw new Test262Error();
        }
      };
      assert.throws(Test262Error, function() {
        [].copyWithin(0, 0, o1);
      });

    }
  },
  {
    name: 'return-abrupt-from-get-start-value.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.copywithin
es6id: 22.1.3.3
description: >
  Return abrupt from getting property value - Get(O, fromKey).
info: |
  22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )

  ...
  8. Let relativeStart be ToInteger(start).
  9. ReturnIfAbrupt(relativeStart).
  10. If relativeStart < 0, let from be max((len + relativeStart),0); else let
  from be min(relativeStart, len).
  ...
  17. Repeat, while count > 0
    a. Let fromKey be ToString(from).
    b. Let toKey be ToString(to).
    c. Let fromPresent be HasProperty(O, fromKey).
    d. ReturnIfAbrupt(fromPresent).
    e. If fromPresent is true, then
      i. Let fromVal be Get(O, fromKey).
      ii. ReturnIfAbrupt(fromVal).
  ...
---*/

      var o = {
        length: 1
      };

      Object.defineProperty(o, '0', {
        get: function() {
          throw new Test262Error();
        }
      });

      assert.throws(Test262Error, function() {
        Array.prototype.copyWithin.call(o, 0, 0);
      });

    }
  },
  {
    name: 'return-abrupt-from-start.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.copywithin
es6id: 22.1.3.3
description: >
  Return abrupt from ToInteger(start).
info: |
  22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )

  ...
  8. Let relativeStart be ToInteger(start).
  9. ReturnIfAbrupt(relativeStart).
  ...
---*/

      var o1 = {
        valueOf: function() {
          throw new Test262Error();
        }
      };
      assert.throws(Test262Error, function() {
        [].copyWithin(0, o1);
      });

    }
  },
  {
    name: 'return-abrupt-from-target.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.copywithin
es6id: 22.1.3.3
description: >
  Return abrupt from ToInteger(target).
info: |
  22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )

  ...
  5. Let relativeTarget be ToInteger(target).
  6. ReturnIfAbrupt(relativeTarget).
  ...
---*/

      var o1 = {
        valueOf: function() {
          throw new Test262Error();
        }
      };
      assert.throws(Test262Error, function() {
        [].copyWithin(o1);
      });

    }
  },
  {
    name: 'return-abrupt-from-this-length.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.copywithin
es6id: 22.1.3.3
description: >
  Return abrupt from ToLength(Get(O, "length")).
info: |
  22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )

  1. Let O be ToObject(this value).
  2. ReturnIfAbrupt(O).
  3. Let len be ToLength(Get(O, "length")).
  4. ReturnIfAbrupt(len).
---*/

      var o1 = {};

      Object.defineProperty(o1, 'length', {
        get: function() {
          throw new Test262Error();
        }
      });
      assert.throws(Test262Error, function() {
        [].copyWithin.call(o1);
      });

      var o2 = {
        length: {
          valueOf: function() {
            throw new Test262Error();
          }
        }
      };
      assert.throws(Test262Error, function() {
        [].copyWithin.call(o2);
      });

    }
  },
  {
    name: 'return-abrupt-from-this.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.copywithin
es6id: 22.1.3.3
description: >
  Return abrupt from ToObject(this value).
info: |
  22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )

  1. Let O be ToObject(this value).
  2. ReturnIfAbrupt(O).
---*/

      assert.throws(TypeError, function() {
        Array.prototype.copyWithin.call(undefined, 0, 0);
      });

      assert.throws(TypeError, function() {
        Array.prototype.copyWithin.call(null, 0, 0);
      });

    }
  },
  {
    name: 'return-this.js',
    exec: function() {
      // Copyright (C) 2015 the V8 project authors. All rights reserved.
      // This code is governed by the BSD license found in the LICENSE file.
      /*---
esid: sec-array.prototype.copywithin
es6id: 22.1.3.3
description: >
  Returns `this`.
info: |
  22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )

  18. Return O.
---*/

      var arr = [];
      var result = arr.copyWithin(0, 0);

      assert.sameValue(result, arr);

      var o = {
        length: 0
      };
      result = Array.prototype.copyWithin.call(o, 0, 0);
      assert.sameValue(result, o);

    }
  },
];

for (var i = 0; i < tests.length; ++i) {
  var exec = tests[i].exec;
  exec();
}
