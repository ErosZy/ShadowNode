'use strict';
var fs = require('fs');
var path = require('path');
var exec = require('child_process').exec;

var root = path.join(process.cwd(), process.argv[2]);
var outputPath = path.join(process.cwd(), process.argv[3] || 'output.js');
console.log(`scanning dir ${root}`);

var items = fs.readdirSync(root);
var output = `'use strict';
'use strict';
// this file is the test262 test suite automatically generated by the tool

// Copyright (C) 2017 Ecma International. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
/*---
description: |
    Collection of assertion functions used throughout test262
---*/

var Test262Error = Error

var $ERROR;
$ERROR = function $ERROR(message) {
  throw new Test262Error('Test262Error: ' + message);
};

function assert(mustBeTrue, message) {
  if (mustBeTrue === true) {
    return;
  }

  if (message === undefined) {
    message = 'Expected true but got ' + String(mustBeTrue);
  }
  $ERROR(message);
}

assert._isSameValue = function(a, b) {
  if (a === b) {
    // Handle +/-0 vs. -/+0
    return a !== 0 || 1 / a === 1 / b;
  }

  // Handle NaN vs. NaN
  return a !== a && b !== b;
};

assert.sameValue = function(actual, expected, message) {
  if (assert._isSameValue(actual, expected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(«' + String(actual) +
    '», «' + String(expected) + '») to be true';

  $ERROR(message);
};

assert.notSameValue = function(actual, unexpected, message) {
  if (!assert._isSameValue(actual, unexpected)) {
    return;
  }

  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  message += 'Expected SameValue(«' + String(actual) +
    '», «' + String(unexpected) + '») to be false';

  $ERROR(message);
};

assert.throws = function(expectedErrorConstructor, func, message) {
  if (typeof func !== 'function') {
    $ERROR('assert.throws requires two arguments: the error constructor ' +
      'and a function to run');
    return;
  }
  if (message === undefined) {
    message = '';
  } else {
    message += ' ';
  }

  try {
    func();
  } catch (thrown) {
    if (typeof thrown !== 'object' || thrown === null) {
      message += 'Thrown value was not an object!';
      $ERROR(message);
    } else if (thrown.constructor !== expectedErrorConstructor) {
      message += 'Expected a ' + expectedErrorConstructor.name +
        ' but got a ' + thrown.constructor.name;
      $ERROR(message);
    }
    return;
  }

  message += 'Expected a ' + expectedErrorConstructor.name +
    ' to be thrown but no exception was thrown at all';
  $ERROR(message);
};

var tests = [`;
items.forEach((item) => {
  if (item.startsWith('.')) {
    return;
  }
  var itemPath = path.resolve(root, item);
  var itemStat = fs.statSync(itemPath);
  if (!itemStat.isFile() || path.extname(item) !== '.js') {
    return;
  }
  console.log(`handle ${itemPath}`);
  var content = fs.readFileSync(itemPath).toString();
  // since we don't support the below features currently, skip them
  if (/Symbol|compareArray|verifyNotEnumerable|verifyNotWritable/.test(content)) {
    return;
  }
  output += `
  {
    name: '${item}',
    exec: function () {
      ${content}
    }
  },`;
});
output += `
];

for (var i = 0; i < tests.length; ++i) {
  var exec = tests[i].exec;
  exec();
}

`;
fs.writeFileSync(outputPath, output);

exec(`eslint --no-ignore -c .eslintrc.js ${outputPath} --fix`, (err, stdout, stderr) => {
  console.log(stdout);
  console.log(stderr);
});
